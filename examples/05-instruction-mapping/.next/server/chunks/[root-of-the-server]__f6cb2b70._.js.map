{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/05-instruction-mapping/app/utils/jsonParser.ts"],"sourcesContent":["// 定义操作类型\nexport interface TodoAction {\n  action: 'add' | 'complete' | 'delete' | 'list' | 'clear_completed' | 'clear_all';\n  task?: string;\n}\n\n// 安全解析JSON的函数\nexport function safeParseJSON(text: string): TodoAction | null {\n  try {\n    // 使用正则表达式提取JSON部分\n    const jsonMatch = text.match(/\\{[^}]*\\}/);\n    if (!jsonMatch) {\n      return null;\n    }\n\n    const jsonString = jsonMatch[0];\n    const parsed = JSON.parse(jsonString);\n    \n    // 验证解析结果的结构\n    if (typeof parsed === 'object' && \n        parsed !== null && \n        'action' in parsed &&\n        ['add', 'complete', 'delete', 'list', 'clear_completed', 'clear_all'].includes(parsed.action)) {\n      \n      // 对于需要task的操作，验证task字段\n      if ((parsed.action === 'add' || parsed.action === 'complete' || parsed.action === 'delete') && \n          (!parsed.task || typeof parsed.task !== 'string' || parsed.task.trim() === '')) {\n        return null;\n      }\n      \n      return {\n        action: parsed.action,\n        task: parsed.task?.trim()\n      };\n    }\n    \n    return null;\n  } catch (error) {\n    console.warn('JSON解析失败:', error);\n    return null;\n  }\n}\n\n// 检查消息是否包含JSON操作\nexport function hasActionInMessage(message: string): boolean {\n  return /\\{[^}]*\"action\"[^}]*\\}/.test(message);\n} "],"names":[],"mappings":"AAAA,SAAS;;;;;AAOF,SAAS,cAAc,IAAY;IACxC,IAAI;QACF,kBAAkB;QAClB,MAAM,YAAY,KAAK,KAAK,CAAC;QAC7B,IAAI,CAAC,WAAW;YACd,OAAO;QACT;QAEA,MAAM,aAAa,SAAS,CAAC,EAAE;QAC/B,MAAM,SAAS,KAAK,KAAK,CAAC;QAE1B,YAAY;QACZ,IAAI,OAAO,WAAW,YAClB,WAAW,QACX,YAAY,UACZ;YAAC;YAAO;YAAY;YAAU;YAAQ;YAAmB;SAAY,CAAC,QAAQ,CAAC,OAAO,MAAM,GAAG;YAEjG,uBAAuB;YACvB,IAAI,CAAC,OAAO,MAAM,KAAK,SAAS,OAAO,MAAM,KAAK,cAAc,OAAO,MAAM,KAAK,QAAQ,KACtF,CAAC,CAAC,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,KAAK,YAAY,OAAO,IAAI,CAAC,IAAI,OAAO,EAAE,GAAG;gBAClF,OAAO;YACT;YAEA,OAAO;gBACL,QAAQ,OAAO,MAAM;gBACrB,MAAM,OAAO,IAAI,EAAE;YACrB;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,aAAa;QAC1B,OAAO;IACT;AACF;AAGO,SAAS,mBAAmB,OAAe;IAChD,OAAO,yBAAyB,IAAI,CAAC;AACvC","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/05-instruction-mapping/app/api/chat/route.ts"],"sourcesContent":["import { streamText } from 'ai';\nimport { createDeepSeek } from '@ai-sdk/deepseek';\nimport { safeParseJSON, hasActionInMessage } from '../../utils/jsonParser';\n\n// 允许流式响应最长30秒\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n\n  // 检查 DeepSeek API key\n  if (!process.env.DEEPSEEK_API_KEY) {\n    return new Response(\n      JSON.stringify({ \n        error: 'DeepSeek API key 未配置。请在 .env.local 文件中设置 DEEPSEEK_API_KEY' \n      }),\n      { status: 500 }\n    );\n  }\n\n  // 创建 DeepSeek provider 实例\n  const deepseek = createDeepSeek({\n    apiKey: process.env.DEEPSEEK_API_KEY,\n  });\n\n  // 🔥 关键：只使用最后一条消息，实现无记忆模式\n  const lastMessage = messages[messages.length - 1];\n  const singleMessage = lastMessage ? [lastMessage] : [];\n\n  console.log('🔥 无记忆模式：只处理最后一条消息', lastMessage?.content);\n\n  // 更新系统提示，强调无记忆模式\n  const systemPrompt = `你是一个智能待办事项助手，能够理解用户的自然语言指令并转换为结构化的操作指令。\n\n你的任务是：\n1. 分析用户输入的自然语言\n2. 判断用户想要执行的操作类型\n3. 输出结构化的JSON指令，这些指令将被映射到具体的函数执行\n\n支持的操作类型：\n- \"add\": 添加新的待办事项\n- \"complete\": 完成待办事项（需要明确的任务ID或完整任务内容）\n- \"delete\": 删除待办事项（需要明确的任务ID或完整任务内容） \n- \"list\": 列出所有待办事项\n- \"clear_completed\": 清除已完成的任务\n- \"clear_all\": 清除所有任务\n\n输出格式要求：\n{ \"action\": \"操作类型\", \"task\": \"任务内容\", \"response\": \"给用户的回复\" }\n\n对于不同类型的指令：\n- add: task字段包含要添加的任务内容\n- complete/delete: task字段包含要操作的任务关键词或ID\n- list/clear_completed/clear_all: 不需要task字段\n\n重要提示：\n- 如果识别到操作指令，必须输出有效的JSON格式\n- 如果无法识别为待办事项操作，正常对话即可\n- 输出的JSON会被系统解析并执行对应的本地函数\n- response字段用于向用户说明你理解的操作意图\n\n示例：\n用户：\"帮我添加一个学习Python的任务\"\n输出：{ \"action\": \"add\", \"task\": \"学习Python\", \"response\": \"好的，我来为你添加'学习Python'这个任务\" }\n\n用户：\"完成学习任务\"  \n输出：{ \"action\": \"complete\", \"task\": \"学习\", \"response\": \"我来帮你完成包含'学习'关键词的任务\" }\n\n用户：\"删除刚才的任务\"\n输出：抱歉，我无法记住之前的对话内容。请明确告诉我要删除哪个任务，比如\"删除学习任务\"或提供任务ID。`;\n\n  // 使用 DeepSeek API - 只传递单条消息\n  const result = streamText({\n    model: deepseek('deepseek-chat'),\n    system: systemPrompt,\n    messages: singleMessage, // 🔥 关键：只传递最后一条消息\n    onFinish: async (completion) => {\n      // 当流式响应完成后，解析 AI 返回的内容\n      const aiResponse = completion.text;\n      \n      // 检查是否包含操作指令\n      if (hasActionInMessage(aiResponse)) {\n        const parsedAction = safeParseJSON(aiResponse);\n        \n        if (parsedAction) {\n          console.log('解析到的指令:', parsedAction);\n          \n          // 在响应中添加执行结果标记，让前端知道这是一个指令\n          console.log(`[指令映射-无记忆模式] 操作类型: ${parsedAction.action}, 任务: ${parsedAction.task || 'N/A'}`);\n          \n          // 可以在这里添加日志记录或其他处理逻辑\n          switch (parsedAction.action) {\n            case 'add':\n              console.log(`[指令映射-无记忆模式] 将添加任务: ${parsedAction.task}`);\n              break;\n            case 'complete':\n              console.log(`[指令映射-无记忆模式] 将完成任务: ${parsedAction.task}`);\n              break;\n            case 'delete':\n              console.log(`[指令映射-无记忆模式] 将删除任务: ${parsedAction.task}`);\n              break;\n            case 'list':\n              console.log(`[指令映射-无记忆模式] 将列出所有任务`);\n              break;\n            case 'clear_completed':\n              console.log(`[指令映射-无记忆模式] 将清除已完成任务`);\n              break;\n            case 'clear_all':\n              console.log(`[指令映射-无记忆模式] 将清除所有任务`);\n              break;\n            default:\n              console.log(`[指令映射-无记忆模式] 未知操作类型: ${parsedAction.action}`);\n          }\n        } else {\n          console.log('JSON解析失败，作为普通对话处理');\n        }\n      } else {\n        console.log('普通对话，无需执行指令映射');\n      }\n    },\n  });\n\n  return result.toDataStreamResponse();\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAGO,MAAM,cAAc;AAEpB,eAAe,KAAK,GAAY;IACrC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAEnC,sBAAsB;IACtB,IAAI,CAAC,QAAQ,GAAG,CAAC,gBAAgB,EAAE;QACjC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,OAAO;QACT,IACA;YAAE,QAAQ;QAAI;IAElB;IAEA,0BAA0B;IAC1B,MAAM,WAAW,CAAA,GAAA,2JAAA,CAAA,iBAAc,AAAD,EAAE;QAC9B,QAAQ,QAAQ,GAAG,CAAC,gBAAgB;IACtC;IAEA,0BAA0B;IAC1B,MAAM,cAAc,QAAQ,CAAC,SAAS,MAAM,GAAG,EAAE;IACjD,MAAM,gBAAgB,cAAc;QAAC;KAAY,GAAG,EAAE;IAEtD,QAAQ,GAAG,CAAC,sBAAsB,aAAa;IAE/C,iBAAiB;IACjB,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAqC2B,CAAC;IAElD,4BAA4B;IAC5B,MAAM,SAAS,CAAA,GAAA,sJAAA,CAAA,aAAU,AAAD,EAAE;QACxB,OAAO,SAAS;QAChB,QAAQ;QACR,UAAU;QACV,UAAU,OAAO;YACf,uBAAuB;YACvB,MAAM,aAAa,WAAW,IAAI;YAElC,aAAa;YACb,IAAI,CAAA,GAAA,4HAAA,CAAA,qBAAkB,AAAD,EAAE,aAAa;gBAClC,MAAM,eAAe,CAAA,GAAA,4HAAA,CAAA,gBAAa,AAAD,EAAE;gBAEnC,IAAI,cAAc;oBAChB,QAAQ,GAAG,CAAC,WAAW;oBAEvB,2BAA2B;oBAC3B,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,aAAa,MAAM,CAAC,MAAM,EAAE,aAAa,IAAI,IAAI,OAAO;oBAE1F,qBAAqB;oBACrB,OAAQ,aAAa,MAAM;wBACzB,KAAK;4BACH,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,aAAa,IAAI,EAAE;4BACtD;wBACF,KAAK;4BACH,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,aAAa,IAAI,EAAE;4BACtD;wBACF,KAAK;4BACH,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,aAAa,IAAI,EAAE;4BACtD;wBACF,KAAK;4BACH,QAAQ,GAAG,CAAC,CAAC,oBAAoB,CAAC;4BAClC;wBACF,KAAK;4BACH,QAAQ,GAAG,CAAC,CAAC,qBAAqB,CAAC;4BACnC;wBACF,KAAK;4BACH,QAAQ,GAAG,CAAC,CAAC,oBAAoB,CAAC;4BAClC;wBACF;4BACE,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,aAAa,MAAM,EAAE;oBAC7D;gBACF,OAAO;oBACL,QAAQ,GAAG,CAAC;gBACd;YACF,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;QACF;IACF;IAEA,OAAO,OAAO,oBAAoB;AACpC","debugId":null}}]
}
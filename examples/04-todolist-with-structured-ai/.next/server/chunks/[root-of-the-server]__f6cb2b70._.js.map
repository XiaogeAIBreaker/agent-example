{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/04-todolist-with-structured-ai/app/utils/jsonParser.ts"],"sourcesContent":["// 定义操作类型\nexport interface TodoAction {\n  action: 'add' | 'complete' | 'delete' | 'list';\n  task?: string;\n}\n\n// 安全解析JSON的函数\nexport function safeParseJSON(text: string): TodoAction | null {\n  try {\n    // 使用正则表达式提取JSON部分\n    const jsonMatch = text.match(/\\{[^}]*\\}/);\n    if (!jsonMatch) {\n      return null;\n    }\n\n    const jsonString = jsonMatch[0];\n    const parsed = JSON.parse(jsonString);\n    \n    // 验证解析结果的结构\n    if (typeof parsed === 'object' && \n        parsed !== null && \n        'action' in parsed &&\n        ['add', 'complete', 'delete', 'list'].includes(parsed.action)) {\n      \n      // 对于需要task的操作，验证task字段\n      if ((parsed.action === 'add' || parsed.action === 'complete' || parsed.action === 'delete') && \n          (!parsed.task || typeof parsed.task !== 'string' || parsed.task.trim() === '')) {\n        return null;\n      }\n      \n      return {\n        action: parsed.action,\n        task: parsed.task?.trim()\n      };\n    }\n    \n    return null;\n  } catch (error) {\n    console.warn('JSON解析失败:', error);\n    return null;\n  }\n}\n\n// 检查消息是否包含JSON操作\nexport function hasActionInMessage(message: string): boolean {\n  return /\\{[^}]*\"action\"[^}]*\\}/.test(message);\n} "],"names":[],"mappings":"AAAA,SAAS;;;;;AAOF,SAAS,cAAc,IAAY;IACxC,IAAI;QACF,kBAAkB;QAClB,MAAM,YAAY,KAAK,KAAK,CAAC;QAC7B,IAAI,CAAC,WAAW;YACd,OAAO;QACT;QAEA,MAAM,aAAa,SAAS,CAAC,EAAE;QAC/B,MAAM,SAAS,KAAK,KAAK,CAAC;QAE1B,YAAY;QACZ,IAAI,OAAO,WAAW,YAClB,WAAW,QACX,YAAY,UACZ;YAAC;YAAO;YAAY;YAAU;SAAO,CAAC,QAAQ,CAAC,OAAO,MAAM,GAAG;YAEjE,uBAAuB;YACvB,IAAI,CAAC,OAAO,MAAM,KAAK,SAAS,OAAO,MAAM,KAAK,cAAc,OAAO,MAAM,KAAK,QAAQ,KACtF,CAAC,CAAC,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,KAAK,YAAY,OAAO,IAAI,CAAC,IAAI,OAAO,EAAE,GAAG;gBAClF,OAAO;YACT;YAEA,OAAO;gBACL,QAAQ,OAAO,MAAM;gBACrB,MAAM,OAAO,IAAI,EAAE;YACrB;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,aAAa;QAC1B,OAAO;IACT;AACF;AAGO,SAAS,mBAAmB,OAAe;IAChD,OAAO,yBAAyB,IAAI,CAAC;AACvC","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/04-todolist-with-structured-ai/app/api/chat/route.ts"],"sourcesContent":["import { streamText } from 'ai';\nimport { createDeepSeek } from '@ai-sdk/deepseek';\nimport { safeParseJSON, hasActionInMessage } from '../../utils/jsonParser';\n\n// 允许流式响应最长30秒\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n\n  // 检查 DeepSeek API key\n  if (!process.env.DEEPSEEK_API_KEY) {\n    return new Response(\n      JSON.stringify({ \n        error: 'DeepSeek API key 未配置。请在 .env.local 文件中设置 DEEPSEEK_API_KEY' \n      }),\n      { status: 500 }\n    );\n  }\n\n  // 创建 DeepSeek provider 实例\n  const deepseek = createDeepSeek({\n    apiKey: process.env.DEEPSEEK_API_KEY,\n  });\n\n  // 系统提示，引导模型输出结构化 JSON\n  const systemPrompt = `你是一个待办事项助手。请根据用户的输入，输出结构化的 JSON 响应。\n\n支持的操作类型：\n- \"add\": 添加新的待办事项\n- \"complete\": 完成待办事项\n- \"delete\": 删除待办事项  \n- \"list\": 列出所有待办事项\n- \"chat\": 普通对话\n\n输出格式：\n{ \"action\": \"操作类型\", \"task\": \"任务内容\", \"response\": \"回复内容\" }\n\n\n如果是普通对话，使用 action: \"chat\"，task 可以为空。\n\n请确保输出的是有效的 JSON 格式。`;\n\n  // 使用 DeepSeek API\n  const result = streamText({\n    model: deepseek('deepseek-chat'),\n    system: systemPrompt,\n    messages,\n    onFinish: async (completion) => {\n      // 当流式响应完成后，解析 AI 返回的内容\n      const aiResponse = completion.text;\n      \n      // 检查是否包含操作指令\n      if (hasActionInMessage(aiResponse)) {\n        const parsedAction = safeParseJSON(aiResponse);\n        \n        if (parsedAction) {\n          console.log('解析到的操作:', parsedAction);\n          \n          // 根据操作类型执行相应的逻辑\n          switch (parsedAction.action) {\n            case 'add':\n              console.log(`添加任务: ${parsedAction.task}`);\n              // 这里可以添加数据库操作或其他业务逻辑\n              break;\n            case 'complete':\n              console.log(`完成任务: ${parsedAction.task}`);\n              // 这里可以添加数据库操作或其他业务逻辑\n              break;\n            case 'delete':\n              console.log(`删除任务: ${parsedAction.task}`);\n              // 这里可以添加数据库操作或其他业务逻辑\n              break;\n            case 'list':\n              console.log('列出所有任务');\n              // 这里可以添加数据库查询逻辑\n              break;\n            default:\n              console.log('普通对话');\n          }\n        }\n      }\n    },\n  });\n\n  return result.toDataStreamResponse();\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAGO,MAAM,cAAc;AAEpB,eAAe,KAAK,GAAY;IACrC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAEnC,sBAAsB;IACtB,IAAI,CAAC,QAAQ,GAAG,CAAC,gBAAgB,EAAE;QACjC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,OAAO;QACT,IACA;YAAE,QAAQ;QAAI;IAElB;IAEA,0BAA0B;IAC1B,MAAM,WAAW,CAAA,GAAA,2JAAA,CAAA,iBAAc,AAAD,EAAE;QAC9B,QAAQ,QAAQ,GAAG,CAAC,gBAAgB;IACtC;IAEA,sBAAsB;IACtB,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;mBAeL,CAAC;IAElB,kBAAkB;IAClB,MAAM,SAAS,CAAA,GAAA,sJAAA,CAAA,aAAU,AAAD,EAAE;QACxB,OAAO,SAAS;QAChB,QAAQ;QACR;QACA,UAAU,OAAO;YACf,uBAAuB;YACvB,MAAM,aAAa,WAAW,IAAI;YAElC,aAAa;YACb,IAAI,CAAA,GAAA,4HAAA,CAAA,qBAAkB,AAAD,EAAE,aAAa;gBAClC,MAAM,eAAe,CAAA,GAAA,4HAAA,CAAA,gBAAa,AAAD,EAAE;gBAEnC,IAAI,cAAc;oBAChB,QAAQ,GAAG,CAAC,WAAW;oBAEvB,gBAAgB;oBAChB,OAAQ,aAAa,MAAM;wBACzB,KAAK;4BACH,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,aAAa,IAAI,EAAE;4BAExC;wBACF,KAAK;4BACH,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,aAAa,IAAI,EAAE;4BAExC;wBACF,KAAK;4BACH,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,aAAa,IAAI,EAAE;4BAExC;wBACF,KAAK;4BACH,QAAQ,GAAG,CAAC;4BAEZ;wBACF;4BACE,QAAQ,GAAG,CAAC;oBAChB;gBACF;YACF;QACF;IACF;IAEA,OAAO,OAAO,oBAAoB;AACpC","debugId":null}}]
}
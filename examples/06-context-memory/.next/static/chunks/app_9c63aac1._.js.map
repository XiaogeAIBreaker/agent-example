{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/06-context-memory/app/utils/jsonParser.ts"],"sourcesContent":["// 定义操作类型\nexport interface TodoAction {\n  action: 'add' | 'complete' | 'delete' | 'list' | 'clear_completed' | 'clear_all';\n  task?: string;\n  response?: string;\n}\n\n// 安全解析JSON的函数\nexport function safeParseJSON(text: string): TodoAction | null {\n  try {\n    // 首先尝试提取markdown代码块中的JSON\n    const codeBlockMatch = text.match(/```json\\s*\\n([\\s\\S]*?)\\n```/);\n    let jsonString = '';\n    \n    if (codeBlockMatch) {\n      jsonString = codeBlockMatch[1].trim();\n    } else {\n      // 如果没有代码块，尝试直接提取JSON\n      const jsonMatch = text.match(/\\{[\\s\\S]*?\\}/);\n      if (!jsonMatch) {\n        return null;\n      }\n      jsonString = jsonMatch[0];\n    }\n\n    console.log('提取的JSON字符串:', jsonString);\n    \n    const parsed = JSON.parse(jsonString);\n    \n    // 验证解析结果的结构\n    if (typeof parsed === 'object' && \n        parsed !== null && \n        'action' in parsed &&\n        ['add', 'complete', 'delete', 'list', 'clear_completed', 'clear_all'].includes(parsed.action)) {\n      \n      // 对于需要task的操作，验证task字段\n      if ((parsed.action === 'add' || parsed.action === 'complete' || parsed.action === 'delete') && \n          (!parsed.task || typeof parsed.task !== 'string' || parsed.task.trim() === '')) {\n        console.warn('操作需要task字段但未提供或为空');\n        return null;\n      }\n      \n      return {\n        action: parsed.action,\n        task: parsed.task?.trim(),\n        response: parsed.response\n      };\n    }\n    \n    console.warn('JSON结构验证失败:', parsed);\n    return null;\n  } catch (error) {\n    console.warn('JSON解析失败:', error);\n    return null;\n  }\n}\n\n// 检查消息是否包含JSON操作\nexport function hasActionInMessage(message: string): boolean {\n  // 检查是否包含markdown代码块或直接的JSON\n  return /```json[\\s\\S]*?```/.test(message) || /\\{[\\s\\S]*?\"action\"[\\s\\S]*?\\}/.test(message);\n} "],"names":[],"mappings":"AAAA,SAAS;;;;;AAQF,SAAS,cAAc,IAAY;IACxC,IAAI;QACF,0BAA0B;QAC1B,MAAM,iBAAiB,KAAK,KAAK,CAAC;QAClC,IAAI,aAAa;QAEjB,IAAI,gBAAgB;YAClB,aAAa,cAAc,CAAC,EAAE,CAAC,IAAI;QACrC,OAAO;YACL,qBAAqB;YACrB,MAAM,YAAY,KAAK,KAAK,CAAC;YAC7B,IAAI,CAAC,WAAW;gBACd,OAAO;YACT;YACA,aAAa,SAAS,CAAC,EAAE;QAC3B;QAEA,QAAQ,GAAG,CAAC,eAAe;QAE3B,MAAM,SAAS,KAAK,KAAK,CAAC;QAE1B,YAAY;QACZ,IAAI,OAAO,WAAW,YAClB,WAAW,QACX,YAAY,UACZ;YAAC;YAAO;YAAY;YAAU;YAAQ;YAAmB;SAAY,CAAC,QAAQ,CAAC,OAAO,MAAM,GAAG;YAEjG,uBAAuB;YACvB,IAAI,CAAC,OAAO,MAAM,KAAK,SAAS,OAAO,MAAM,KAAK,cAAc,OAAO,MAAM,KAAK,QAAQ,KACtF,CAAC,CAAC,OAAO,IAAI,IAAI,OAAO,OAAO,IAAI,KAAK,YAAY,OAAO,IAAI,CAAC,IAAI,OAAO,EAAE,GAAG;gBAClF,QAAQ,IAAI,CAAC;gBACb,OAAO;YACT;YAEA,OAAO;gBACL,QAAQ,OAAO,MAAM;gBACrB,MAAM,OAAO,IAAI,EAAE;gBACnB,UAAU,OAAO,QAAQ;YAC3B;QACF;QAEA,QAAQ,IAAI,CAAC,eAAe;QAC5B,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,aAAa;QAC1B,OAAO;IACT;AACF;AAGO,SAAS,mBAAmB,OAAe;IAChD,4BAA4B;IAC5B,OAAO,qBAAqB,IAAI,CAAC,YAAY,+BAA+B,IAAI,CAAC;AACnF","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/06-context-memory/app/hooks/useInstructionExecutor.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { Instruction, ExecutionResult } from '../utils/instructionMapper';\nimport { TodoAction, safeParseJSON, hasActionInMessage } from '../utils/jsonParser';\n\ninterface UseInstructionExecutorProps {\n  executeInstruction: (instruction: Instruction) => ExecutionResult;\n}\n\nexport function useInstructionExecutor({ executeInstruction }: UseInstructionExecutorProps) {\n  \n  // 解析AI响应并执行指令\n  const parseAndExecuteMessage = useCallback((aiMessage: string): ExecutionResult | null => {\n    // 检查消息是否包含指令\n    if (!hasActionInMessage(aiMessage)) {\n      return null;\n    }\n\n    // 解析JSON指令\n    const parsedAction: TodoAction | null = safeParseJSON(aiMessage);\n    \n    if (!parsedAction) {\n      console.warn('无法解析AI返回的指令');\n      return {\n        success: false,\n        message: '指令格式错误，无法解析'\n      };\n    }\n\n    // 将TodoAction转换为Instruction格式\n    const instruction: Instruction = {\n      action: parsedAction.action,\n      task: parsedAction.task\n    };\n\n    // 执行指令\n    console.log('执行AI指令:', instruction);\n    const result = executeInstruction(instruction);\n    \n    return result;\n  }, [executeInstruction]);\n\n  // 批量处理AI消息中的指令\n  const processAIResponse = useCallback((aiMessage: string): ExecutionResult[] => {\n    const results: ExecutionResult[] = [];\n    \n    // 查找所有JSON指令\n    const jsonMatches = aiMessage.match(/\\{[^}]*\"action\"[^}]*\\}/g);\n    \n    if (jsonMatches) {\n      jsonMatches.forEach((jsonStr, index) => {\n        try {\n          const parsed = JSON.parse(jsonStr);\n          if (parsed.action && ['add', 'complete', 'delete', 'list', 'clear_completed', 'clear_all'].includes(parsed.action)) {\n            const instruction: Instruction = {\n              action: parsed.action,\n              task: parsed.task\n            };\n            \n            const result = executeInstruction(instruction);\n            results.push(result);\n            \n            console.log(`执行第${index + 1}个指令:`, instruction, '结果:', result);\n          }\n        } catch (error) {\n          console.warn('解析指令失败:', jsonStr, error);\n          results.push({\n            success: false,\n            message: `指令${index + 1}解析失败`\n          });\n        }\n      });\n    }\n    \n    return results;\n  }, [executeInstruction]);\n\n  return {\n    parseAndExecuteMessage,\n    processAIResponse\n  };\n} "],"names":[],"mappings":";;;AAAA;AAEA;;;;AAMO,SAAS,uBAAuB,EAAE,kBAAkB,EAA+B;;IAExF,cAAc;IACd,MAAM,yBAAyB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;sEAAE,CAAC;YAC1C,aAAa;YACb,IAAI,CAAC,CAAA,GAAA,6HAAA,CAAA,qBAAkB,AAAD,EAAE,YAAY;gBAClC,OAAO;YACT;YAEA,WAAW;YACX,MAAM,eAAkC,CAAA,GAAA,6HAAA,CAAA,gBAAa,AAAD,EAAE;YAEtD,IAAI,CAAC,cAAc;gBACjB,QAAQ,IAAI,CAAC;gBACb,OAAO;oBACL,SAAS;oBACT,SAAS;gBACX;YACF;YAEA,8BAA8B;YAC9B,MAAM,cAA2B;gBAC/B,QAAQ,aAAa,MAAM;gBAC3B,MAAM,aAAa,IAAI;YACzB;YAEA,OAAO;YACP,QAAQ,GAAG,CAAC,WAAW;YACvB,MAAM,SAAS,mBAAmB;YAElC,OAAO;QACT;qEAAG;QAAC;KAAmB;IAEvB,eAAe;IACf,MAAM,oBAAoB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;iEAAE,CAAC;YACrC,MAAM,UAA6B,EAAE;YAErC,aAAa;YACb,MAAM,cAAc,UAAU,KAAK,CAAC;YAEpC,IAAI,aAAa;gBACf,YAAY,OAAO;6EAAC,CAAC,SAAS;wBAC5B,IAAI;4BACF,MAAM,SAAS,KAAK,KAAK,CAAC;4BAC1B,IAAI,OAAO,MAAM,IAAI;gCAAC;gCAAO;gCAAY;gCAAU;gCAAQ;gCAAmB;6BAAY,CAAC,QAAQ,CAAC,OAAO,MAAM,GAAG;gCAClH,MAAM,cAA2B;oCAC/B,QAAQ,OAAO,MAAM;oCACrB,MAAM,OAAO,IAAI;gCACnB;gCAEA,MAAM,SAAS,mBAAmB;gCAClC,QAAQ,IAAI,CAAC;gCAEb,QAAQ,GAAG,CAAC,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,aAAa,OAAO;4BACzD;wBACF,EAAE,OAAO,OAAO;4BACd,QAAQ,IAAI,CAAC,WAAW,SAAS;4BACjC,QAAQ,IAAI,CAAC;gCACX,SAAS;gCACT,SAAS,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC;4BAC/B;wBACF;oBACF;;YACF;YAEA,OAAO;QACT;gEAAG;QAAC;KAAmB;IAEvB,OAAO;QACL;QACA;IACF;AACF;GAxEgB","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/06-context-memory/app/components/ChatSidebar.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { useChat } from 'ai/react';\nimport { useInstructionExecutor } from '../hooks/useInstructionExecutor';\nimport { Instruction, ExecutionResult } from '../utils/instructionMapper';\n\ninterface ChatSidebarProps {\n  executeInstruction: (instruction: Instruction) => ExecutionResult;\n}\n\nexport default function ChatSidebar({ executeInstruction }: ChatSidebarProps) {\n  const [showContext, setShowContext] = useState(false);\n  const [executionResults, setExecutionResults] = useState<Array<{id: string, message: string, success: boolean, timestamp: number}>>([]);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  \n  // 使用指令执行器\n  const { parseAndExecuteMessage } = useInstructionExecutor({ executeInstruction });\n\n  const { messages, input, handleInputChange, handleSubmit, isLoading } = useChat({\n    api: '/api/chat',\n    onFinish: (message) => {\n      // 尝试执行AI回复中的指令\n      const result = parseAndExecuteMessage(message.content);\n      if (result) {\n        setExecutionResults(prev => [...prev.slice(-9), {\n          id: `result_${Date.now()}`,\n          message: result.message || '执行完成',\n          success: result.success,\n          timestamp: Date.now()\n        }]);\n      }\n    }\n  });\n\n  // 自动滚动到底部\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, executionResults]);\n\n  // 从messages中提取上下文信息\n  const getLastAddedTask = () => {\n    // 从最近的消息中找到最后添加的任务\n    for (let i = messages.length - 1; i >= 0; i--) {\n      const msg = messages[i];\n      if (msg.role === 'assistant' && msg.content.includes('\"action\": \"add\"')) {\n        const match = msg.content.match(/\"task\":\\s*\"([^\"]+)\"/);\n        if (match) {\n          return match[1];\n        }\n      }\n    }\n    return null;\n  };\n\n  // 从messages中获取最近的操作\n  const getRecentActions = () => {\n    const actions = [];\n    for (let i = messages.length - 1; i >= 0 && actions.length < 5; i--) {\n      const msg = messages[i];\n      if (msg.role === 'assistant') {\n        const actionMatch = msg.content.match(/\"action\":\\s*\"([^\"]+)\"/);\n        const taskMatch = msg.content.match(/\"task\":\\s*\"([^\"]+)\"/);\n        if (actionMatch) {\n          actions.unshift({\n            action: actionMatch[1],\n            task: taskMatch ? taskMatch[1] : '',\n            timestamp: Date.now() - (messages.length - 1 - i) * 60000 // 估算时间\n          });\n        }\n      }\n    }\n    return actions;\n  };\n\n  // 简单的上下文引用处理\n  const enhanceUserInput = (userInput: string) => {\n    const lastTask = getLastAddedTask();\n    \n    let enhancedInput = userInput;\n    \n    // 处理\"刚才\"、\"最后\"等引用\n    if (userInput.includes('刚才') || userInput.includes('最后') || userInput.includes('上个')) {\n      if (lastTask) {\n        enhancedInput += `\\n(注：最近添加的任务是\"${lastTask}\")`;\n      }\n    }\n    \n    // 处理\"再加\"等重复操作\n    if (userInput.includes('再加') || userInput.includes('再添加')) {\n      if (lastTask) {\n        enhancedInput += `\\n(注：上次添加的是\"${lastTask}\"，请添加类似的任务)`;\n      }\n    }\n    \n    return enhancedInput;\n  };\n\n  // 处理表单提交\n  const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    \n    if (!input.trim() || isLoading) return;\n    \n    // 增强用户输入\n    const enhancedInput = enhanceUserInput(input.trim());\n    \n    // 如果输入被增强了，先更新input然后提交\n    if (enhancedInput !== input.trim()) {\n      handleInputChange({ target: { value: enhancedInput } } as React.ChangeEvent<HTMLInputElement>);\n      setTimeout(() => {\n        handleSubmit(e);\n        handleInputChange({ target: { value: '' } } as React.ChangeEvent<HTMLInputElement>);\n      }, 0);\n    } else {\n      handleSubmit(e);\n    }\n  };\n\n  const lastTask = getLastAddedTask();\n  const recentActions = getRecentActions();\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg h-full flex flex-col\">\n      {/* 头部 */}\n      <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white\">\n            🤖 AI 助手\n          </h2>\n          <button\n            onClick={() => setShowContext(!showContext)}\n            className={`px-3 py-1 text-xs rounded-full transition-colors ${\n              showContext \n                ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'\n                : 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400'\n            }`}\n            title=\"切换上下文视图\"\n          >\n            {showContext ? '💬 对话' : '📋 上下文'}\n          </button>\n        </div>\n        \n        <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n          支持上下文对话 | 消息: {messages.length}\n        </p>\n        \n        {lastTask && (\n          <div className=\"mt-2 p-2 bg-blue-50 dark:bg-blue-900/20 rounded text-xs\">\n            <span className=\"text-blue-600 dark:text-blue-400\">\n              💡 最后添加: &ldquo;{lastTask}&rdquo;\n            </span>\n          </div>\n        )}\n      </div>\n\n      {/* 内容区域 */}\n      <div className=\"flex-1 p-4 overflow-y-auto\">\n        {showContext ? (\n          // 上下文视图\n          <div className=\"space-y-2\">\n            <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n              📋 对话上下文\n            </h3>\n            \n            {lastTask && (\n              <div className=\"p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg text-sm\">\n                <strong>最后添加的任务:</strong> {lastTask}\n              </div>\n            )}\n            \n            {recentActions.length > 0 && (\n              <div className=\"p-2 bg-green-50 dark:bg-green-900/20 rounded-lg text-sm\">\n                <strong>最近操作:</strong>\n                <ul className=\"mt-1 space-y-1\">\n                  {recentActions.map((action, index) => (\n                    <li key={index} className=\"text-xs\">\n                      • {action.action}: {action.task}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n            \n            <div className=\"p-2 bg-gray-50 dark:bg-gray-900/20 rounded-lg text-sm\">\n              <strong>对话历史:</strong> {messages.length} 条消息\n            </div>\n          </div>\n        ) : (\n          // 对话视图\n          <div className=\"space-y-4\">\n            {messages.length === 0 && (\n              <div className=\"text-center text-gray-500 dark:text-gray-400 mt-8\">\n                <p className=\"text-2xl mb-2\">👋</p>\n                <p>你好！我是你的 AI 助手</p>\n                <p className=\"text-sm mt-1\">支持上下文对话，试试说&ldquo;再加一个任务&rdquo;</p>\n              </div>\n            )}\n            \n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-[85%] px-3 py-2 rounded-lg text-sm ${\n                    message.role === 'user'\n                      ? 'bg-blue-500 text-white'\n                      : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white'\n                  }`}\n                >\n                  <div className=\"whitespace-pre-wrap\">{message.content}</div>\n                </div>\n              </div>\n            ))}\n\n            {/* 显示执行结果 */}\n            {executionResults.map((result) => (\n              <div key={result.id} className=\"flex justify-center\">\n                <div className=\"bg-green-100 dark:bg-green-900/30 border border-green-300 dark:border-green-700 text-green-800 dark:text-green-300 px-3 py-2 rounded-lg text-sm max-w-[90%]\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-green-600\">⚡</span>\n                    <span>指令执行结果：{result.success ? '✅' : '❌'} {result.message}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {isLoading && (\n              <div className=\"flex justify-start\">\n                <div className=\"bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-white px-3 py-2 rounded-lg text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-blue-500\"></div>\n                    <span>正在思考中...</span>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n        )}\n      </div>\n\n      {/* 输入区域 */}\n      <div className=\"border-t border-gray-200 dark:border-gray-700 p-3\">\n        <form onSubmit={handleFormSubmit} className=\"flex gap-2\">\n          <input\n            value={input}\n            onChange={handleInputChange}\n            placeholder=\"输入消息，支持'再加一个'、'完成刚才的'等上下文指令...\"\n            disabled={isLoading}\n            className=\"flex-1 px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white disabled:opacity-50\"\n          />\n          <button\n            type=\"submit\"\n            disabled={isLoading || !input.trim()}\n            className=\"px-3 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed text-sm\"\n          >\n            发送\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 681, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/06-context-memory/app/utils/instructionMapper.ts"],"sourcesContent":["// 定义指令类型\nexport interface Instruction {\n  action: 'add' | 'complete' | 'delete' | 'list' | 'clear_completed' | 'clear_all';\n  task?: string;\n  id?: number;\n  response?: string;\n}\n\n// 定义待办事项类型\nexport interface Todo {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\n// 定义执行结果类型\nexport interface ExecutionResult {\n  success: boolean;\n  message?: string;\n  data?: Todo[] | Todo | boolean;\n}\n\n// 定义函数映射表类型\nexport type TodoFunction = (params?: string | number | undefined) => ExecutionResult | Todo[] | boolean | void;\n\n// 指令映射器类\nexport class InstructionMapper {\n  private functionMap: Map<string, TodoFunction>;\n  \n  constructor() {\n    this.functionMap = new Map();\n  }\n\n  // 注册函数到映射表\n  registerFunction(action: string, func: TodoFunction) {\n    this.functionMap.set(action, func);\n  }\n\n  // 执行指令映射的函数\n  executeInstruction(instruction: Instruction): ExecutionResult {\n    const func = this.functionMap.get(instruction.action);\n    \n    if (!func) {\n      console.warn(`未找到操作 \"${instruction.action}\" 对应的函数`);\n      return { \n        success: false, \n        message: `不支持的操作: ${instruction.action}` \n      };\n    }\n\n    try {\n      // 根据不同的操作类型传递不同的参数\n      let result: ExecutionResult | Todo[] | boolean | void;\n      \n      switch (instruction.action) {\n        case 'add':\n          result = func(instruction.task);\n          break;\n        case 'complete':\n        case 'delete':\n          result = func(instruction.id || instruction.task);\n          break;\n        case 'list':\n        case 'clear_completed':\n        case 'clear_all':\n          result = func();\n          break;\n        default:\n          result = func();\n      }\n\n      // 标准化返回结果\n      if (typeof result === 'object' && result !== null && 'success' in result) {\n        return result as ExecutionResult;\n      } else {\n        return {\n          success: true,\n          message: `操作 \"${instruction.action}\" 执行成功`,\n          data: result as Todo[] | Todo | boolean\n        };\n      }\n    } catch (error) {\n      console.error('执行指令时发生错误:', error);\n      return { \n        success: false, \n        message: `执行操作 \"${instruction.action}\" 时发生错误` \n      };\n    }\n  }\n\n  // 获取所有注册的函数\n  getRegisteredActions(): string[] {\n    return Array.from(this.functionMap.keys());\n  }\n\n  // 检查是否支持某个操作\n  supportsAction(action: string): boolean {\n    return this.functionMap.has(action);\n  }\n}\n\n// 创建全局实例\nexport const instructionMapper = new InstructionMapper();\n\n// 辅助函数：根据任务名称查找todo项\nexport function findTodoByText(todos: Todo[], taskText: string): Todo | undefined {\n  return todos.find(todo => \n    todo.text.toLowerCase().includes(taskText.toLowerCase()) ||\n    taskText.toLowerCase().includes(todo.text.toLowerCase())\n  );\n}\n\n// 辅助函数：根据ID查找todo项\nexport function findTodoById(todos: Todo[], id: number): Todo | undefined {\n  return todos.find(todo => todo.id === id);\n} "],"names":[],"mappings":"AAAA,SAAS;;;;;;;AA0BF,MAAM;IACH,YAAuC;IAE/C,aAAc;QACZ,IAAI,CAAC,WAAW,GAAG,IAAI;IACzB;IAEA,WAAW;IACX,iBAAiB,MAAc,EAAE,IAAkB,EAAE;QACnD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ;IAC/B;IAEA,YAAY;IACZ,mBAAmB,WAAwB,EAAmB;QAC5D,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,MAAM;QAEpD,IAAI,CAAC,MAAM;YACT,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,YAAY,MAAM,CAAC,OAAO,CAAC;YAClD,OAAO;gBACL,SAAS;gBACT,SAAS,CAAC,QAAQ,EAAE,YAAY,MAAM,EAAE;YAC1C;QACF;QAEA,IAAI;YACF,mBAAmB;YACnB,IAAI;YAEJ,OAAQ,YAAY,MAAM;gBACxB,KAAK;oBACH,SAAS,KAAK,YAAY,IAAI;oBAC9B;gBACF,KAAK;gBACL,KAAK;oBACH,SAAS,KAAK,YAAY,EAAE,IAAI,YAAY,IAAI;oBAChD;gBACF,KAAK;gBACL,KAAK;gBACL,KAAK;oBACH,SAAS;oBACT;gBACF;oBACE,SAAS;YACb;YAEA,UAAU;YACV,IAAI,OAAO,WAAW,YAAY,WAAW,QAAQ,aAAa,QAAQ;gBACxE,OAAO;YACT,OAAO;gBACL,OAAO;oBACL,SAAS;oBACT,SAAS,CAAC,IAAI,EAAE,YAAY,MAAM,CAAC,MAAM,CAAC;oBAC1C,MAAM;gBACR;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,cAAc;YAC5B,OAAO;gBACL,SAAS;gBACT,SAAS,CAAC,MAAM,EAAE,YAAY,MAAM,CAAC,OAAO,CAAC;YAC/C;QACF;IACF;IAEA,YAAY;IACZ,uBAAiC;QAC/B,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI;IACzC;IAEA,aAAa;IACb,eAAe,MAAc,EAAW;QACtC,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;IAC9B;AACF;AAGO,MAAM,oBAAoB,IAAI;AAG9B,SAAS,eAAe,KAAa,EAAE,QAAgB;IAC5D,OAAO,MAAM,IAAI,CAAC,CAAA,OAChB,KAAK,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,SAAS,WAAW,OACrD,SAAS,WAAW,GAAG,QAAQ,CAAC,KAAK,IAAI,CAAC,WAAW;AAEzD;AAGO,SAAS,aAAa,KAAa,EAAE,EAAU;IACpD,OAAO,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;AACxC","debugId":null}},
    {"offset": {"line": 769, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/06-context-memory/app/hooks/useInstructionMapping.ts"],"sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { instructionMapper, Instruction, Todo, ExecutionResult, findTodoByText } from '../utils/instructionMapper';\n\ninterface UseInstructionMappingProps {\n  todos: Todo[];\n  setTodos: (todos: Todo[]) => void;\n  // 添加记忆回调函数\n  onActionExecuted?: (action: string, taskId?: number, taskText?: string) => void;\n}\n\nexport function useInstructionMapping({ todos, setTodos, onActionExecuted }: UseInstructionMappingProps) {\n  \n  // 添加待办事项函数\n  const addTodoFunction = useCallback((taskText?: string | number): ExecutionResult => {\n    const task = typeof taskText === 'string' ? taskText : String(taskText || '');\n    \n    if (!task || task.trim() === '') {\n      return {\n        success: false,\n        message: '任务内容不能为空'\n      };\n    }\n\n    const newTodo: Todo = {\n      id: Date.now(),\n      text: task.trim(),\n      completed: false,\n    };\n    \n    setTodos([...todos, newTodo]);\n    \n    // 记录到记忆中\n    onActionExecuted?.('add', newTodo.id, newTodo.text);\n    \n    return {\n      success: true,\n      message: `已添加任务: ${task}`,\n      data: newTodo\n    };\n  }, [todos, setTodos, onActionExecuted]);\n\n  // 完成待办事项函数\n  const completeTodoFunction = useCallback((taskIdentifier?: string | number): ExecutionResult => {\n    if (!taskIdentifier) {\n      return {\n        success: false,\n        message: '请指定要完成的任务'\n      };\n    }\n\n    let targetTodo: Todo | undefined;\n    \n    if (typeof taskIdentifier === 'number') {\n      targetTodo = todos.find(todo => todo.id === taskIdentifier);\n    } else {\n      targetTodo = findTodoByText(todos, taskIdentifier);\n    }\n\n    if (!targetTodo) {\n      return {\n        success: false,\n        message: `未找到任务: ${taskIdentifier}`\n      };\n    }\n\n    if (targetTodo.completed) {\n      return {\n        success: false,\n        message: `任务 \"${targetTodo.text}\" 已经完成了`\n      };\n    }\n\n    const updatedTodos = todos.map(todo =>\n      todo.id === targetTodo!.id ? { ...todo, completed: true } : todo\n    );\n    \n    setTodos(updatedTodos);\n    \n    // 记录到记忆中\n    onActionExecuted?.('complete', targetTodo.id, targetTodo.text);\n    \n    return {\n      success: true,\n      message: `已完成任务: ${targetTodo.text}`,\n      data: { ...targetTodo, completed: true }\n    };\n  }, [todos, setTodos, onActionExecuted]);\n\n  // 删除待办事项函数\n  const deleteTodoFunction = useCallback((taskIdentifier?: string | number): ExecutionResult => {\n    if (!taskIdentifier) {\n      return {\n        success: false,\n        message: '请指定要删除的任务'\n      };\n    }\n\n    let targetTodo: Todo | undefined;\n    \n    if (typeof taskIdentifier === 'number') {\n      targetTodo = todos.find(todo => todo.id === taskIdentifier);\n    } else {\n      targetTodo = findTodoByText(todos, taskIdentifier);\n    }\n\n    if (!targetTodo) {\n      return {\n        success: false,\n        message: `未找到任务: ${taskIdentifier}`\n      };\n    }\n\n    const updatedTodos = todos.filter(todo => todo.id !== targetTodo!.id);\n    setTodos(updatedTodos);\n    \n    // 记录到记忆中\n    onActionExecuted?.('delete', targetTodo.id, targetTodo.text);\n    \n    return {\n      success: true,\n      message: `已删除任务: ${targetTodo.text}`,\n      data: targetTodo\n    };\n  }, [todos, setTodos, onActionExecuted]);\n\n  // 列出所有待办事项函数\n  const listTodosFunction = useCallback((): ExecutionResult => {\n    const completedCount = todos.filter(todo => todo.completed).length;\n    const pendingCount = todos.length - completedCount;\n    \n    // 记录到记忆中\n    onActionExecuted?.('list');\n    \n    return {\n      success: true,\n      message: `共有 ${todos.length} 个任务，其中 ${completedCount} 个已完成，${pendingCount} 个待完成`,\n      data: todos\n    };\n  }, [todos, onActionExecuted]);\n\n  // 清除已完成任务函数\n  const clearCompletedFunction = useCallback((): ExecutionResult => {\n    const completedTodos = todos.filter(todo => todo.completed);\n    \n    if (completedTodos.length === 0) {\n      return {\n        success: false,\n        message: '没有已完成的任务需要清除'\n      };\n    }\n\n    const updatedTodos = todos.filter(todo => !todo.completed);\n    setTodos(updatedTodos);\n    \n    // 记录到记忆中\n    onActionExecuted?.('clear_completed');\n    \n    return {\n      success: true,\n      message: `已清除 ${completedTodos.length} 个已完成的任务`,\n      data: completedTodos\n    };\n  }, [todos, setTodos, onActionExecuted]);\n\n  // 清除所有任务函数\n  const clearAllFunction = useCallback((): ExecutionResult => {\n    if (todos.length === 0) {\n      return {\n        success: false,\n        message: '没有任务需要清除'\n      };\n    }\n\n    const clearedCount = todos.length;\n    setTodos([]);\n    \n    // 记录到记忆中\n    onActionExecuted?.('clear_all');\n    \n    return {\n      success: true,\n      message: `已清除所有 ${clearedCount} 个任务`,\n      data: todos\n    };\n  }, [todos, setTodos, onActionExecuted]);\n\n  // 注册所有函数到映射器\n  useEffect(() => {\n    instructionMapper.registerFunction('add', addTodoFunction);\n    instructionMapper.registerFunction('complete', completeTodoFunction);\n    instructionMapper.registerFunction('delete', deleteTodoFunction);\n    instructionMapper.registerFunction('list', listTodosFunction);\n    instructionMapper.registerFunction('clear_completed', clearCompletedFunction);\n    instructionMapper.registerFunction('clear_all', clearAllFunction);\n  }, [\n    addTodoFunction,\n    completeTodoFunction,\n    deleteTodoFunction,\n    listTodosFunction,\n    clearCompletedFunction,\n    clearAllFunction\n  ]);\n\n  // 执行指令的主函数\n  const executeInstruction = useCallback((instruction: Instruction): ExecutionResult => {\n    console.log('执行指令:', instruction);\n    const result = instructionMapper.executeInstruction(instruction);\n    console.log('执行结果:', result);\n    return result;\n  }, []);\n\n  // 获取支持的操作列表\n  const getSupportedActions = useCallback((): string[] => {\n    return instructionMapper.getRegisteredActions();\n  }, []);\n\n  return {\n    executeInstruction,\n    getSupportedActions,\n    // 直接导出各个函数，以便组件可以直接调用\n    addTodo: addTodoFunction,\n    completeTodo: completeTodoFunction,\n    deleteTodo: deleteTodoFunction,\n    listTodos: listTodosFunction,\n    clearCompleted: clearCompletedFunction,\n    clearAll: clearAllFunction\n  };\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1030, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/06-context-memory/app/hooks/useMemory.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\n\n// 记忆条目接口\nexport interface MemoryEntry {\n  id: string;\n  timestamp: number;\n  type: 'user_message' | 'ai_response' | 'action_executed' | 'context_reference';\n  content: string;\n  metadata?: {\n    action?: string;\n    taskId?: number;\n    taskText?: string;\n    reference?: string;\n  };\n}\n\n// 上下文类型\nexport interface Context {\n  recentActions: Array<{\n    action: string;\n    taskId?: number;\n    taskText?: string;\n    timestamp: number;\n  }>;\n  lastAddedTask?: {\n    id: number;\n    text: string;\n    timestamp: number;\n  };\n  recentMessages: Array<{\n    content: string;\n    timestamp: number;\n    type: 'user' | 'ai';\n  }>;\n}\n\nexport function useMemory() {\n  const [memory, setMemory] = useState<MemoryEntry[]>([]);\n  const [context, setContext] = useState<Context>({\n    recentActions: [],\n    recentMessages: []\n  });\n\n  // 添加记忆条目\n  const addMemoryEntry = useCallback((entry: Omit<MemoryEntry, 'id' | 'timestamp'>) => {\n    const newEntry: MemoryEntry = {\n      ...entry,\n      id: `mem_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: Date.now()\n    };\n    \n    setMemory(prev => [...prev.slice(-49), newEntry]); // 保持最近50条记录\n    return newEntry;\n  }, []);\n\n  // 记录用户消息\n  const recordUserMessage = useCallback((message: string) => {\n    addMemoryEntry({\n      type: 'user_message',\n      content: message\n    });\n\n    // 更新上下文中的最近消息\n    setContext(prev => ({\n      ...prev,\n      recentMessages: [\n        ...prev.recentMessages.slice(-9), // 保持最近10条消息\n        {\n          content: message,\n          timestamp: Date.now(),\n          type: 'user'\n        }\n      ]\n    }));\n  }, [addMemoryEntry]);\n\n  // 记录AI回复\n  const recordAIResponse = useCallback((response: string) => {\n    addMemoryEntry({\n      type: 'ai_response',\n      content: response\n    });\n\n    // 更新上下文中的最近消息\n    setContext(prev => ({\n      ...prev,\n      recentMessages: [\n        ...prev.recentMessages.slice(-9),\n        {\n          content: response,\n          timestamp: Date.now(),\n          type: 'ai'\n        }\n      ]\n    }));\n  }, [addMemoryEntry]);\n\n  // 记录执行的动作\n  const recordAction = useCallback((action: string, taskId?: number, taskText?: string) => {\n    addMemoryEntry({\n      type: 'action_executed',\n      content: `执行动作: ${action}${taskText ? ` - ${taskText}` : ''}`,\n      metadata: {\n        action,\n        taskId,\n        taskText\n      }\n    });\n\n    // 更新上下文中的最近动作\n    setContext(prev => ({\n      ...prev,\n      recentActions: [\n        ...prev.recentActions.slice(-9), // 保持最近10个动作\n        {\n          action,\n          taskId,\n          taskText,\n          timestamp: Date.now()\n        }\n      ],\n      // 如果是添加任务，更新最后添加的任务\n      ...(action === 'add' && taskId && taskText ? {\n        lastAddedTask: {\n          id: taskId,\n          text: taskText,\n          timestamp: Date.now()\n        }\n      } : {})\n    }));\n  }, [addMemoryEntry]);\n\n  // 记录上下文引用\n  const recordContextReference = useCallback((reference: string, content: string) => {\n    addMemoryEntry({\n      type: 'context_reference',\n      content,\n      metadata: {\n        reference\n      }\n    });\n  }, [addMemoryEntry]);\n\n  // 解析上下文引用（如\"刚才那个\"、\"最后一个\"等）\n  const resolveContextReference = useCallback((userInput: string) => {\n    const input = userInput.toLowerCase();\n    let resolvedContext = '';\n    \n    // 检查是否引用了\"刚才\"、\"最后\"、\"上一个\"等\n    if (input.includes('刚才') || input.includes('最后') || input.includes('上一个') || input.includes('上个')) {\n      if (input.includes('添加') || input.includes('任务')) {\n        // 引用最后添加的任务\n        if (context.lastAddedTask) {\n          resolvedContext = `引用最后添加的任务: \"${context.lastAddedTask.text}\" (ID: ${context.lastAddedTask.id})`;\n          recordContextReference('last_added_task', resolvedContext);\n          return {\n            type: 'task_reference',\n            taskId: context.lastAddedTask.id,\n            taskText: context.lastAddedTask.text,\n            resolvedText: resolvedContext\n          };\n        }\n      } else {\n        // 引用最后的动作\n        const lastAction = context.recentActions[context.recentActions.length - 1];\n        if (lastAction) {\n          resolvedContext = `引用最后的动作: ${lastAction.action}${lastAction.taskText ? ` - ${lastAction.taskText}` : ''}`;\n          recordContextReference('last_action', resolvedContext);\n          return {\n            type: 'action_reference',\n            action: lastAction.action,\n            taskId: lastAction.taskId,\n            taskText: lastAction.taskText,\n            resolvedText: resolvedContext\n          };\n        }\n      }\n    }\n\n    // 检查是否引用了\"再\"、\"再加\"等\n    if (input.includes('再加') || input.includes('再添加')) {\n      const lastAddAction = context.recentActions\n        .slice()\n        .reverse()\n        .find(action => action.action === 'add');\n      \n      if (lastAddAction) {\n        resolvedContext = `基于上次添加的任务模式: \"${lastAddAction.taskText}\"`;\n        recordContextReference('repeat_add_pattern', resolvedContext);\n        return {\n          type: 'repeat_pattern',\n          action: 'add',\n          referenceTask: lastAddAction.taskText,\n          resolvedText: resolvedContext\n        };\n      }\n    }\n\n    return null;\n  }, [context, recordContextReference]);\n\n  // 获取上下文摘要（用于发送给AI）\n  const getContextSummary = useCallback(() => {\n    const recentMessages = context.recentMessages.slice(-6); // 最近3轮对话\n    const recentActions = context.recentActions.slice(-5); // 最近5个动作\n    \n    let summary = '';\n    \n    if (recentMessages.length > 0) {\n      summary += '最近的对话:\\n';\n      recentMessages.forEach(msg => {\n        summary += `${msg.type === 'user' ? '用户' : 'AI'}: ${msg.content}\\n`;\n      });\n      summary += '\\n';\n    }\n    \n    if (recentActions.length > 0) {\n      summary += '最近的操作:\\n';\n      recentActions.forEach(action => {\n        summary += `${action.action}: ${action.taskText || '无具体任务'}\\n`;\n      });\n      summary += '\\n';\n    }\n    \n    if (context.lastAddedTask) {\n      summary += `最后添加的任务: \"${context.lastAddedTask.text}\" (ID: ${context.lastAddedTask.id})\\n`;\n    }\n    \n    return summary;\n  }, [context]);\n\n  // 清除记忆（可选功能）\n  const clearMemory = useCallback(() => {\n    setMemory([]);\n    setContext({\n      recentActions: [],\n      recentMessages: []\n    });\n  }, []);\n\n  return {\n    memory,\n    context,\n    addMemoryEntry,\n    recordUserMessage,\n    recordAIResponse,\n    recordAction,\n    recordContextReference,\n    resolveContextReference,\n    getContextSummary,\n    clearMemory\n  };\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1285, "column": 0}, "map": {"version":3,"sources":["file:///Users/bytedance/Desktop/agent-example/examples/06-context-memory/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport ChatSidebar from './components/ChatSidebar';\nimport { Todo } from './utils/instructionMapper';\nimport { useInstructionMapping } from './hooks/useInstructionMapping';\nimport { useMemory } from './hooks/useMemory';\n\nexport default function TodoList() {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [inputValue, setInputValue] = useState('');\n\n  // 使用记忆hook\n  const { recordAction } = useMemory();\n\n  // 使用指令映射hook，传递记忆回调\n  const { \n    executeInstruction, \n    getSupportedActions,\n    addTodo: addTodoFunction,\n    clearCompleted: clearCompletedFunction,\n    clearAll: clearAllFunction\n  } = useInstructionMapping({ \n    todos, \n    setTodos, \n    onActionExecuted: recordAction \n  });\n\n  // 本地添加任务（通过UI直接操作）\n  const addTodo = () => {\n    if (inputValue.trim() !== '') {\n      const result = addTodoFunction(inputValue.trim());\n      if (result.success) {\n        setInputValue('');\n      } else {\n        console.error('添加任务失败:', result.message);\n      }\n    }\n  };\n\n  // 本地删除任务（通过UI直接操作）\n  const deleteTodo = (id: number) => {\n    const result = executeInstruction({\n      action: 'delete',\n      id: id\n    });\n    if (!result.success) {\n      console.error('删除任务失败:', result.message);\n    }\n  };\n\n  // 本地切换任务状态（通过UI直接操作）\n  const toggleTodo = (id: number) => {\n    const todo = todos.find(t => t.id === id);\n    if (todo && !todo.completed) {\n      const result = executeInstruction({\n        action: 'complete',\n        id: id\n      });\n      if (!result.success) {\n        console.error('完成任务失败:', result.message);\n      }\n    } else if (todo && todo.completed) {\n      // 对于已完成的任务，我们可以取消完成状态\n      setTodos(todos.map(t =>\n        t.id === id ? { ...t, completed: false } : t\n      ));\n    }\n  };\n\n  // 通过映射系统清除已完成任务\n  const clearCompleted = () => {\n    const result = clearCompletedFunction();\n    if (!result.success) {\n      console.error('清除已完成任务失败:', result.message);\n    }\n  };\n\n  // 通过映射系统清除所有任务\n  const clearAll = () => {\n    const result = clearAllFunction();\n    if (!result.success) {\n      console.error('清除所有任务失败:', result.message);\n    }\n  };\n\n  const completedCount = todos.filter(todo => todo.completed).length;\n  const totalCount = todos.length;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <div className=\"max-w-6xl mx-auto h-[calc(100vh-2rem)] flex flex-col lg:flex-row gap-6\">\n        {/* 左侧：待办事项 */}\n        <div className=\"flex-1 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 overflow-y-auto\">\n          <div className=\"mb-4\">\n            <h1 className=\"text-3xl font-bold text-center text-gray-800 dark:text-white mb-2\">\n              📝 智能上下文记忆待办事项\n            </h1>\n            <p className=\"text-center text-sm text-gray-600 dark:text-gray-400\">\n              AI 指令映射 + 上下文记忆 | 支持操作: {getSupportedActions().join(', ')}\n            </p>\n            <p className=\"text-center text-xs text-gray-500 dark:text-gray-500 mt-1\">\n              💡 支持上下文引用：&ldquo;再加一个任务&rdquo;、&ldquo;完成刚才那个&rdquo;、&ldquo;删除最后添加的&rdquo;\n            </p>\n          </div>\n          \n          {/* 添加新任务 */}\n          <div className=\"flex gap-2 mb-6\">\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && addTodo()}\n              placeholder=\"添加新任务...\"\n              className=\"flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\n            />\n            <button\n              onClick={addTodo}\n              className=\"px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors duration-200 font-medium\"\n            >\n              添加\n            </button>\n          </div>\n\n          {/* 统计信息 */}\n          {totalCount > 0 && (\n            <div className=\"mb-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 text-center\">\n                总计: {totalCount} 任务 | 已完成: {completedCount} 任务 | \n                剩余: {totalCount - completedCount} 任务\n              </p>\n            </div>\n          )}\n\n          {/* 任务列表 */}\n          <div className=\"space-y-2\">\n            {todos.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500 dark:text-gray-400 text-lg\">\n                  暂无任务，添加一个新任务开始吧！\n                </p>\n                <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-2\">\n                  💡 你可以直接在此添加，或向<span className=\"lg:inline hidden\">右侧</span><span className=\"lg:hidden inline\">下方</span>的 AI 助手发送指令\n                </p>\n                <p className=\"text-xs text-gray-400 dark:text-gray-500 mt-1\">\n                  例如：&ldquo;帮我添加一个学习任务&rdquo; 或 &ldquo;添加买菜任务&rdquo;\n                </p>\n                <p className=\"text-xs text-gray-400 dark:text-gray-500 mt-1\">\n                  🔗 支持上下文：&ldquo;再加一个类似的&rdquo; 或 &ldquo;完成刚才那个&rdquo;\n                </p>\n              </div>\n            ) : (\n              todos.map((todo) => (\n                <div\n                  key={todo.id}\n                  className={`flex items-center gap-3 p-3 rounded-lg border transition-all duration-200 ${\n                    todo.completed\n                      ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800'\n                      : 'bg-white dark:bg-gray-700 border-gray-200 dark:border-gray-600 hover:shadow-md'\n                  }`}\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => toggleTodo(todo.id)}\n                    className=\"w-5 h-5 text-blue-600 rounded focus:ring-blue-500 focus:ring-2\"\n                  />\n                  <span\n                    className={`flex-1 ${\n                      todo.completed\n                        ? 'line-through text-gray-500 dark:text-gray-400'\n                        : 'text-gray-800 dark:text-white'\n                    }`}\n                  >\n                    {todo.text}\n                  </span>\n                  <span className=\"text-xs text-gray-400 dark:text-gray-500\">\n                    ID: {todo.id}\n                  </span>\n                  <button\n                    onClick={() => deleteTodo(todo.id)}\n                    className=\"px-3 py-1 text-red-600 hover:bg-red-100 dark:hover:bg-red-900/30 rounded transition-colors duration-200\"\n                    title=\"删除任务\"\n                  >\n                    🗑️\n                  </button>\n                </div>\n              ))\n            )}\n          </div>\n\n          {/* 快捷操作 */}\n          {todos.length > 0 && (\n            <div className=\"mt-6 flex gap-2 justify-center\">\n              <button\n                onClick={clearCompleted}\n                className=\"px-4 py-2 text-sm bg-red-100 hover:bg-red-200 text-red-700 rounded-lg transition-colors duration-200\"\n                disabled={completedCount === 0}\n              >\n                清除已完成 ({completedCount})\n              </button>\n              <button\n                onClick={clearAll}\n                className=\"px-4 py-2 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors duration-200\"\n              >\n                清除全部\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* 右侧：AI助手侧边栏 */}\n        <div className=\"w-full lg:w-80 h-96 lg:h-full\">\n          <ChatSidebar executeInstruction={executeInstruction} />\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}